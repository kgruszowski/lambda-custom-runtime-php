#!/opt/bin/php
<?php

// require vendors from layer
require __DIR__.'/vendor/autoload.php';

// require file with function basing on ENV configuration
$handlerFunction = array_slice(explode('.', $_ENV['_HANDLER']), -1)[0];
require_once $_ENV['LAMBDA_TASK_ROOT'] . '/src/' . $handlerFunction . '.php';

// Generate random number to test Lambda Execution Context
$sharedRandom = rand();

$client = new \GuzzleHttp\Client();

while (true) {
    $request = getNextRequest($client);

    try {
        $response = $handlerFunction($request['payload'], $sharedRandom);
    } catch (\Exception $e) {
        // Handle invocation error and notify Runtime API
        handleInvocationError($client, $request['invocationId'], $e);
        continue;
    }

    sendResponse($client, $request['invocationId'], $response);
}

function getNextRequest($client): array
{
    $response = $client->get('http://'.$_ENV['AWS_LAMBDA_RUNTIME_API'].'/2018-06-01/runtime/invocation/next');

    return [
        'invocationId' => $response->getHeader('Lambda-Runtime-Aws-Request-Id')[0],
        'payload' => json_decode((string) $response->getBody(), true)
    ];
}

function sendResponse($client, $invocationId, $response)
{
    $client->post(
        'http://' . $_ENV['AWS_LAMBDA_RUNTIME_API'] . '/2018-06-01/runtime/invocation/' . $invocationId . '/response',
        ['body' => $response]
    );
}

function handleInvocationError($client, $invocationId, \Exception $e)
{
    $client->post(
        'http://' . $_ENV['AWS_LAMBDA_RUNTIME_API'] . '/2018-06-01/runtime/invocation/' . $invocationId . '/error',
        [
            'body' => [
                'errorType' => 'CustomInvocationError',
                'errorMessage' => $e->getMessage(),
                'stackTrace' => $e->getTraceAsString()
            ],
            'headers' => [
                "Lambda-Runtime-Function-Error-Type" => "Unhandled"
            ]
        ]
    );
}